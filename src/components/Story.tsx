import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { Scroll, Swords, MapPin } from "lucide-react";

interface StoryProps {
  language: "en" | "ru";
  onUpdateProfile: () => void;
}

interface StoryProgress {
  current_location: string;
  defeated_bosses: string[];
  unlocked_abilities: string[];
  visited_locations: string[];
  has_void_heart: boolean;
}

interface LocationChoice {
  icon: string;
  text: string;
  action: "navigate" | "combat" | "boss";
  target?: string;
  combatDifficulty?: number;
  soulReward?: number;
  bossId?: string;
  requiresBoss?: string;
}

interface Location {
  id: string;
  title: { en: string; ru: string };
  description: { en: string; ru: string };
  choices: LocationChoice[];
}

const locations: Location[] = [
  {
    id: "awakening",
    title: { en: "Awakening", ru: "–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ" },
    description: {
      en: "You wake in a cave where stones whisper. Your body trembles, and in your hand ‚Äî a nail, covered in dust. Every echo in the darkness calls you deeper.",
      ru: "–¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –≤ –ø–µ—â–µ—Ä–µ, –≥–¥–µ –∫–∞–º–Ω–∏ —à–µ–ø—á—É—Ç. –¢–µ–ª–æ –¥—Ä–æ–∂–∏—Ç, –∞ –≤ —Ä—É–∫–µ ‚Äî –≥–≤–æ–∑–¥—å, –ø–æ–∫—Ä—ã—Ç—ã–π –ø—ã–ª—å—é. –ö–∞–∂–¥–æ–µ —ç—Ö–æ –≤ —Ç–µ–º–Ω–æ—Ç–µ –∑–æ–≤—ë—Ç —Ç–µ–±—è –≥–ª—É–±–∂–µ."
    },
    choices: [
      { icon: "‚öîÔ∏è", text: "Enter Forgotten Crossroads", action: "navigate", target: "crossroads" }
    ]
  },
  {
    id: "crossroads",
    title: { en: "Forgotten Crossroads", ru: "Forgotten Crossroads" },
    description: {
      en: "Stone arches, full of echoing footsteps. Everything seems motionless, but somewhere far away you hear strikes ‚Äî like someone's training. You feel a slight itch in your fingers ‚Äî the nail wants blood.",
      ru: "–ö–∞–º–µ–Ω–Ω—ã–µ –∞—Ä–∫–∏, –ø–æ–ª–Ω—ã–µ —ç—Ö–∞ —à–∞–≥–æ–≤. –ó–¥–µ—Å—å –≤—Å—ë –∫–∞–∂–µ—Ç—Å—è –Ω–µ–ø–æ–¥–≤–∏–∂–Ω—ã–º, –Ω–æ –≥–¥–µ-—Ç–æ –¥–∞–ª–µ–∫–æ —Å–ª—ã—à–Ω—ã —É–¥–∞—Ä—ã ‚Äî –±—É–¥—Ç–æ —á—å–∏-—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ª—ë–≥–∫–∏–π –∑—É–¥ –≤ –ø–∞–ª—å—Ü–∞—Ö ‚Äî –≥–≤–æ–∑–¥—å —Ö–æ—á–µ—Ç –∫—Ä–æ–≤–∏."
    },
    choices: [
      { icon: "üåø", text: "Go to the green light (Greenpath)", action: "combat", target: "greenpath", combatDifficulty: 2, soulReward: 10 },
      { icon: "üï≥", text: "Descend deeper (Depths)", action: "combat", target: "crossroads", combatDifficulty: 3, soulReward: 15 },
      { icon: "‚öí", text: "Pass through broken gates (Arena of the False)", action: "boss", target: "arena_false", bossId: "false_knight" }
    ]
  },
  {
    id: "arena_false",
    title: { en: "Arena of the False", ru: "Arena of the False" },
    description: {
      en: "Under a dome of stone you hear footsteps. The armor comes to life, as if inside it ‚Äî the rumble of the earth itself.",
      ru: "–ü–æ–¥ –∫—É–ø–æ–ª–æ–º –∏–∑ –∫–∞–º–Ω—è —Ç—ã —Å–ª—ã—à–∏—à—å —à–∞–≥–∏. –î–æ—Å–ø–µ—Ö –æ–∂–∏–≤–∞–µ—Ç, –±—É–¥—Ç–æ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ ‚Äî –≥—É–ª —Å–∞–º–æ–π –∑–µ–º–ª–∏."
    },
    choices: [
      { icon: "‚¨Ö", text: "Return to Crossroads", action: "navigate", target: "crossroads" },
      { icon: "üåø", text: "To Greenpath", action: "navigate", target: "greenpath" }
    ]
  },
  {
    id: "greenpath",
    title: { en: "Greenpath", ru: "Greenpath" },
    description: {
      en: "Everything around is alive. Vines move from your breath, and in the distance someone sings ‚Äî a melody of leaves and wind.",
      ru: "–í—Å—ë –≤–æ–∫—Ä—É–≥ –∂–∏–≤–æ–µ. –õ–æ–∑—ã –¥–≤–∏–≥–∞—é—Ç—Å—è –æ—Ç —Ç–≤–æ–µ–≥–æ –¥—ã—Ö–∞–Ω–∏—è, –∞ –≤–¥–∞–ª–µ–∫–µ –∫—Ç–æ-—Ç–æ –ø–æ—ë—Ç ‚Äî –º–µ–ª–æ–¥–∏—è –∏–∑ –ª–∏—Å—Ç—å–µ–≤ –∏ –≤–µ—Ç—Ä–∞."
    },
    choices: [
      { icon: "üå∏", text: "Descend to the station (Queen's Station)", action: "combat", target: "queens_station", combatDifficulty: 2, soulReward: 12 },
      { icon: "üï∏", text: "Make your way through the thickets (Trial of Hornet)", action: "boss", target: "trial_hornet", bossId: "hornet" }
    ]
  },
  {
    id: "trial_hornet",
    title: { en: "Trial of Hornet", ru: "Trial of Hornet" },
    description: {
      en: "You enter an arena of vines and thorns. She is already waiting. \"Battle is a conversation without words,\" she whispers.",
      ru: "–¢—ã –≤—Ö–æ–¥–∏—à—å –Ω–∞ –ø–ª–æ—â–∞–¥–∫—É –∏–∑ –ª–æ–∑ –∏ –∫–æ–ª—é—á–µ–∫. –û–Ω–∞ —É–∂–µ –∂–¥—ë—Ç. \"–°—Ä–∞–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Ä–∞–∑–≥–æ–≤–æ—Ä –±–µ–∑ —Å–ª–æ–≤\", ‚Äî —à–µ–ø—á–µ—Ç –æ–Ω–∞."
    },
    choices: [
      { icon: "‚¨Ü", text: "Return to Greenpath", action: "navigate", target: "greenpath" },
      { icon: "üå∏", text: "To Queen's Station", action: "navigate", target: "queens_station" }
    ]
  },
  {
    id: "queens_station",
    title: { en: "Queen's Station", ru: "Queen's Station" },
    description: {
      en: "There are no people here. Only drops and the rustle of spores. You feel peace, but the air is too thick.",
      ru: "–ó–¥–µ—Å—å –Ω–µ—Ç –ª—é–¥–µ–π. –¢–æ–ª—å–∫–æ –∫–∞–ø–ª–∏ –∏ —à–µ–ª–µ—Å—Ç —Å–ø–æ—Ä. –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ–∫–æ–π, –Ω–æ –≤–æ–∑–¥—É—Ö —Å–ª–∏—à–∫–æ–º –≥—É—Å—Ç–æ–π."
    },
    choices: [
      { icon: "üçÑ", text: "Go to the fungal wastes (Fungal Wastes)", action: "combat", target: "fungal_wastes", combatDifficulty: 3, soulReward: 18 },
      { icon: "üï≥", text: "Descend into the depths (Deepnest)", action: "combat", target: "deepnest", combatDifficulty: 4, soulReward: 20, requiresBoss: "hornet" }
    ]
  },
  {
    id: "fungal_wastes",
    title: { en: "Fungal Wastes", ru: "Fungal Wastes" },
    description: {
      en: "The air is sweet, like a dream. You walk on soft soil, hearing the pops of spores.",
      ru: "–í–æ–∑–¥—É—Ö —Å–ª–∞–¥–∫–∏–π, –±—É–¥—Ç–æ —Å–æ–Ω. –¢—ã –∏–¥—ë—à—å –ø–æ –º—è–≥–∫–æ–π –ø–æ—á–≤–µ, —Å–ª—ã—à–∞ —Ö–ª–æ–ø–∫–∏ —Å–ø–æ—Ä."
    },
    choices: [
      { icon: "‚öí", text: "Enter the spore temple (Mantis Arena)", action: "boss", target: "mantis_arena", bossId: "mantis_lords" },
      { icon: "üíß", text: "Open the lift to City of Tears", action: "combat", target: "city_tears", combatDifficulty: 4, soulReward: 15 }
    ]
  },
  {
    id: "mantis_arena",
    title: { en: "Mantis Arena", ru: "Mantis Arena" },
    description: {
      en: "You stand among spore columns. Three silhouettes bow in unison and attack.",
      ru: "–¢—ã —Å—Ç–æ–∏—à—å —Å—Ä–µ–¥–∏ –∫–æ–ª–æ–Ω–Ω —Å–ø–æ—Ä. –¢—Ä–∏ —Å–∏–ª—É—ç—Ç–∞ –≤ —É–Ω–∏—Å–æ–Ω –∫–ª–∞–Ω—è—é—Ç—Å—è –∏ –∞—Ç–∞–∫—É—é—Ç."
    },
    choices: [
      { icon: "‚¨Ü", text: "Return to Queen's Station", action: "navigate", target: "queens_station" },
      { icon: "üíß", text: "Descend to City of Tears", action: "navigate", target: "city_tears" }
    ]
  },
  {
    id: "city_tears",
    title: { en: "City of Tears", ru: "City of Tears" },
    description: {
      en: "The sky cries. You walk across bridges where every drop seems like the step of someone invisible.",
      ru: "–ù–µ–±–æ –ø–ª–∞—á–µ—Ç. –¢—ã –∏–¥—ë—à—å –ø–æ –º–æ—Å—Ç–∞–º, –≥–¥–µ –∫–∞–∂–¥–∞—è –∫–∞–ø–ª—è –∫–∞–∂–µ—Ç—Å—è —à–∞–≥–æ–º –∫–æ–≥–æ-—Ç–æ –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ."
    },
    choices: [
      { icon: "‚öí", text: "Enter the mage tower (Soul Sanctum)", action: "boss", target: "soul_sanctum", bossId: "soul_master" },
      { icon: "‚¨á", text: "Descend into the channel (Ancient Basin)", action: "combat", target: "ancient_basin", combatDifficulty: 4, soulReward: 25 }
    ]
  },
  {
    id: "soul_sanctum",
    title: { en: "Soul Sanctum", ru: "Soul Sanctum" },
    description: {
      en: "The hall is full of whispers. Sparks dance. Mages strike quickly, but chaotically.",
      ru: "–ó–∞–ª –ø–æ–ª–æ–Ω —à—ë–ø–æ—Ç–∞. –ò—Å–∫—Ä—ã —Ç–∞–Ω—Ü—É—é—Ç. –ú–∞–≥–∏ –±—å—é—Ç –±—ã—Å—Ç—Ä–æ, –Ω–æ —Ö–∞–æ—Ç–∏—á–Ω–æ."
    },
    choices: [
      { icon: "‚¨á", text: "Descend to Ancient Basin", action: "navigate", target: "ancient_basin" }
    ]
  },
  {
    id: "ancient_basin",
    title: { en: "Ancient Basin", ru: "Ancient Basin" },
    description: {
      en: "You stand on the edge of a mirror. The air is cold, but inside everything boils.",
      ru: "–¢—ã —Å—Ç–æ–∏—à—å –Ω–∞ –∫—Ä–∞—é –∑–µ—Ä–∫–∞–ª–∞. –í–æ–∑–¥—É—Ö —Ö–æ–ª–æ–¥–Ω—ã–π, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –≤—Å—ë –∫–∏–ø–∏—Ç."
    },
    choices: [
      { icon: "‚öí", text: "Enter the hall of the dead vessel (Broken Vessel)", action: "boss", target: "broken_vessel", bossId: "broken_vessel" },
      { icon: "‚ö´", text: "Descend into the abyss (Abyss)", action: "navigate", target: "abyss", requiresBoss: "broken_vessel" }
    ]
  },
  {
    id: "broken_vessel",
    title: { en: "Broken Vessel", ru: "Broken Vessel" },
    description: {
      en: "Before you is a reflection ‚Äî empty, but alive. It attacks as if it wants to die.",
      ru: "–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –ø—É—Å—Ç–æ–µ, –Ω–æ –∂–∏–≤–æ–µ. –û–Ω –∞—Ç–∞–∫—É–µ—Ç, –∫–∞–∫ –±—É–¥—Ç–æ —Ö–æ—á–µ—Ç —É–º–µ—Ä–µ—Ç—å."
    },
    choices: [
      { icon: "‚ö´", text: "Descend to Abyss", action: "navigate", target: "abyss" },
      { icon: "‚¨Ü", text: "Return to City of Tears", action: "navigate", target: "city_tears" }
    ]
  },
  {
    id: "abyss",
    title: { en: "The Abyss", ru: "The Abyss" },
    description: {
      en: "Darkness is dense, like water. You see yourself, many of yourself ‚Äî all want to kill you.",
      ru: "–¢—å–º–∞ –ø–ª–æ—Ç–Ω–∞—è, –∫–∞–∫ –≤–æ–¥–∞. –¢—ã –≤–∏–¥–∏—à—å —Å–µ–±—è, –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–µ–±—è ‚Äî –≤—Å–µ —Ö–æ—Ç—è—Ç —É–±–∏—Ç—å —Ç–µ–±—è."
    },
    choices: [
      { icon: "‚¨Ü", text: "Return to Basin", action: "navigate", target: "ancient_basin" },
      { icon: "‚öí", text: "Go to The Black Egg Temple", action: "navigate", target: "black_egg" }
    ]
  },
  {
    id: "black_egg",
    title: { en: "The Black Egg Temple", ru: "The Black Egg Temple" },
    description: {
      en: "You enter a hall where the air rings like metal. The vessel stands in the middle, motionless, but alive.",
      ru: "–¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –∑–∞–ª, –≥–¥–µ –≤–æ–∑–¥—É—Ö –∑–≤–æ–Ω–∫–∏–π, –∫–∞–∫ –º–µ—Ç–∞–ª–ª. –°–æ—Å—É–¥ —Å—Ç–æ–∏—Ç –ø–æ—Å—Ä–µ–¥–∏, –Ω–µ–ø–æ–¥–≤–∏–∂–Ω—ã–π, –Ω–æ –∂–∏–≤–æ–π."
    },
    choices: [
      { icon: "‚öîÔ∏è", text: "Fight the Hollow Knight", action: "boss", target: "black_egg", bossId: "hollow_knight" }
    ]
  },
  {
    id: "deepnest",
    title: { en: "Deepnest", ru: "Deepnest" },
    description: {
      en: "Web and darkness. Something crawls nearby.",
      ru: "–ü–∞—É—Ç–∏–Ω–∞ –∏ —Ç–µ–º–Ω–æ—Ç–∞. –ß—Ç–æ-—Ç–æ –ø–æ–ª–∑–∞–µ—Ç —Ä—è–¥–æ–º."
    },
    choices: [
      { icon: "‚¨Ü", text: "Return to Queen's Station", action: "navigate", target: "queens_station" }
    ]
  }
];

const translations = {
  en: {
    title: "Chronicle of Hallownest",
    currentLocation: "Current Location",
    progress: "Progress",
    defeatedBosses: "Defeated Bosses",
    abilities: "Unlocked Abilities",
    choices: "Where do you want to go?",
    locked: "Locked",
    requiresBoss: "Requires defeating",
    abilities_list: {
      dash: "Dash - Dodge chance",
      thread: "Thread of Movement - Slowed time",
      wall_jump: "Wall Jump - Avoid damage",
      vengeful_spirit: "Vengeful Spirit - Reflect damage",
      double_jump: "Double Jump - Death save",
      void_heart: "Void Heart - True Ending key"
    }
  },
  ru: {
    title: "–•—Ä–æ–Ω–∏–∫–∏ –•–∞–ª–ª–æ—É–Ω–µ—Å—Ç–∞",
    currentLocation: "–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è",
    progress: "–ü—Ä–æ–≥—Ä–µ—Å—Å",
    defeatedBosses: "–ü–æ–±–µ–∂–¥—ë–Ω–Ω—ã–µ –±–æ—Å—Å—ã",
    abilities: "–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
    choices: "–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏?",
    locked: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
    requiresBoss: "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç—å",
    abilities_list: {
      dash: "–†—ã–≤–æ–∫ - —à–∞–Ω—Å —É–≤–æ—Ä–æ—Ç–∞",
      thread: "–ù–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è - –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏",
      wall_jump: "–ü—Ä—ã–∂–æ–∫ –æ—Ç —Å—Ç–µ–Ω—ã - –∏–∑–±–µ–∂–∞–Ω–∏–µ —É—Ä–æ–Ω–∞",
      vengeful_spirit: "–ú—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥—É—Ö - –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞",
      double_jump: "–î–≤–æ–π–Ω–æ–π –ø—Ä—ã–∂–æ–∫ - —Å–ø–∞—Å–µ–Ω–∏–µ –æ—Ç —Å–º–µ—Ä—Ç–∏",
      void_heart: "–°–µ—Ä–¥—Ü–µ –ü—É—Å—Ç–æ—Ç—ã - –∫–ª—é—á –∫ –∏—Å—Ç–∏–Ω–Ω–æ–º—É —Ñ–∏–Ω–∞–ª—É"
    }
  }
};

const bossNames: Record<string, { en: string; ru: string }> = {
  false_knight: { en: "False Knight", ru: "–õ–æ–∂–Ω—ã–π –†—ã—Ü–∞—Ä—å" },
  hornet: { en: "Hornet", ru: "–•–æ—Ä–Ω–µ—Ç" },
  mantis_lords: { en: "Mantis Lords", ru: "–õ–æ—Ä–¥—ã –ë–æ–≥–æ–º–æ–ª—ã" },
  soul_master: { en: "Soul Master", ru: "–ú–∞—Å—Ç–µ—Ä –î—É—à" },
  broken_vessel: { en: "Broken Vessel", ru: "–†–∞–∑–±–∏—Ç—ã–π –°–æ—Å—É–¥" },
  hollow_knight: { en: "Hollow Knight", ru: "–ü—É—Å—Ç–æ–π –†—ã—Ü–∞—Ä—å" }
};

export const Story = ({ language, onUpdateProfile }: StoryProps) => {
  const [progress, setProgress] = useState<StoryProgress | null>(null);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();
  const t = translations[language];

  useEffect(() => {
    loadProgress();
  }, []);

  const loadProgress = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      const { data, error } = await supabase
        .from("story_progress")
        .select("*")
        .eq("user_id", user.id)
        .maybeSingle();

      if (error) throw error;

      if (!data) {
        // Create initial progress
        const { data: newProgress, error: insertError } = await supabase
          .from("story_progress")
          .insert({
            user_id: user.id,
            current_location: "awakening",
            defeated_bosses: [],
            unlocked_abilities: [],
            visited_locations: ["awakening"],
            has_void_heart: false
          })
          .select()
          .single();

        if (insertError) throw insertError;
        setProgress(newProgress);
      } else {
        setProgress(data);
      }
    } catch (error: any) {
      toast({
        title: "Error loading story progress",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleChoice = async (choice: LocationChoice) => {
    if (!progress) return;

    // Check if choice is locked
    if (choice.requiresBoss && !progress.defeated_bosses.includes(choice.requiresBoss)) {
      toast({
        title: t.locked,
        description: `${t.requiresBoss} ${bossNames[choice.requiresBoss][language]}`,
        variant: "destructive"
      });
      return;
    }

    if (choice.action === "navigate" && choice.target) {
      await updateLocation(choice.target);
    } else if (choice.action === "combat") {
      toast({
        title: language === "en" ? "Combat started!" : "–ë–æ–π –Ω–∞—á–∞–ª—Å—è!",
        description: language === "en" 
          ? "Complete the combat to continue your journey" 
          : "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –±–æ–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ"
      });
      // TODO: Start combat with difficulty
    } else if (choice.action === "boss" && choice.target) {
      await updateLocation(choice.target);
    }
  };

  const updateLocation = async (locationId: string) => {
    if (!progress) return;

    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      const visitedLocations = progress.visited_locations.includes(locationId)
        ? progress.visited_locations
        : [...progress.visited_locations, locationId];

      const { error } = await supabase
        .from("story_progress")
        .update({
          current_location: locationId,
          visited_locations: visitedLocations
        })
        .eq("user_id", user.id);

      if (error) throw error;

      setProgress({
        ...progress,
        current_location: locationId,
        visited_locations: visitedLocations
      });

      toast({
        title: language === "en" ? "Location changed" : "–õ–æ–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞"
      });
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive"
      });
    }
  };

  if (loading) {
    return <div className="text-center p-8">Loading...</div>;
  }

  if (!progress) return null;

  const currentLocation = locations.find(loc => loc.id === progress.current_location);
  if (!currentLocation) return null;

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Scroll className="w-5 h-5" />
            {t.title}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <div className="flex items-center gap-2 mb-2">
              <MapPin className="w-4 h-4" />
              <h3 className="font-semibold">{currentLocation.title[language]}</h3>
            </div>
            <p className="text-muted-foreground italic">
              {currentLocation.description[language]}
            </p>
          </div>

          <div className="border-t pt-4">
            <h4 className="font-medium mb-3 flex items-center gap-2">
              <Swords className="w-4 h-4" />
              {t.choices}
            </h4>
            <div className="space-y-2">
              {currentLocation.choices.map((choice, index) => {
                const isLocked = choice.requiresBoss && !progress.defeated_bosses.includes(choice.requiresBoss);
                
                return (
                  <Button
                    key={index}
                    variant={isLocked ? "outline" : "default"}
                    className="w-full justify-start text-left h-auto py-3"
                    onClick={() => handleChoice(choice)}
                    disabled={isLocked}
                  >
                    <span className="mr-2">{choice.icon}</span>
                    <span className="flex-1">{choice.text}</span>
                    {isLocked && (
                      <span className="text-xs text-muted-foreground ml-2">
                        ({t.locked})
                      </span>
                    )}
                  </Button>
                );
              })}
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>{t.progress}</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div>
            <h4 className="font-medium mb-2">{t.defeatedBosses}:</h4>
            {progress.defeated_bosses.length > 0 ? (
              <div className="flex flex-wrap gap-2">
                {progress.defeated_bosses.map((boss, i) => (
                  <span key={i} className="px-2 py-1 bg-secondary rounded text-sm">
                    {bossNames[boss]?.[language] || boss}
                  </span>
                ))}
              </div>
            ) : (
              <p className="text-muted-foreground text-sm">
                {language === "en" ? "None yet" : "–ü–æ–∫–∞ –Ω–µ—Ç"}
              </p>
            )}
          </div>

          <div>
            <h4 className="font-medium mb-2">{t.abilities}:</h4>
            {progress.unlocked_abilities.length > 0 ? (
              <div className="space-y-1">
                {progress.unlocked_abilities.map((ability, i) => (
                  <div key={i} className="text-sm">
                    ‚Ä¢ {t.abilities_list[ability as keyof typeof t.abilities_list] || ability}
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-muted-foreground text-sm">
                {language === "en" ? "None yet" : "–ü–æ–∫–∞ –Ω–µ—Ç"}
              </p>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};